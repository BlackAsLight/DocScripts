// ==UserScript==
// @name         Doc: Nations
// @namespace    https://politicsandwar.com/nation/id=19818
// @version      10.0.0
// @description  Improves the Nations page UI
// @author       BlackAsLight
// @match        https://politicsandwar.com/nations/
// @include      https://politicsandwar.com/index.php?id=15*
// @icon         https://avatars.githubusercontent.com/u/44320105
// @grant        none
// ==/UserScript==
'use strict';
function a(n,e,i){let t=document.createElement(n);if(typeof e=="function")e(t);else if(e){for(let[o,r]of Object.entries(e))r!=null&&(t[o]=r);i&&i(t)}return t}if(document.querySelector("#Doc_Nations"))throw Error("This script was already injected...");document.body.append(a("div",{id:"Doc_Nations"},n=>n.style.setProperty("display","none")));var s="Doc_N1",l="Doc_N2",p=document.querySelector('form[method="GET"]');p.parentElement?.insertBefore(a("div",n=>n.append(a("label",{htmlFor:"Doc_Score",textContent:"Nation Score:"}),a("input",{id:"Doc_Score",type:"number",value:localStorage.getItem(s)??"0"},e=>e.addEventListener("change",function(i){if(this.valueAsNumber.toString()==="NaN")return;let t=new Date;this.nextSibling&&(this.nextSibling.textContent=t.toJSON()),localStorage.setItem(l,t.getTime().toString()),localStorage.setItem(s,this.valueAsNumber.toString()),m(this.valueAsNumber)})),a("br"),new Date(parseInt(localStorage.getItem(l)??"0")).toJSON(),a("button",{className:"btn btn-primary",textContent:"Refresh"},e=>{e.addEventListener("click",async function(i){this.disabled=!0;let t=parseFloat(new DOMParser().parseFromString(await(await fetch("https://politicsandwar.com/nation/war/")).text(),"text/html").querySelector('a[href^="/index.php?id=15"]').href.split("?")[1].split("&").find(r=>r.startsWith("keyword="))?.slice(8)??"0");console.log(`Score: ${t}`);let o=new Date;this.previousSibling&&(this.previousSibling.textContent=o.toJSON()),localStorage.setItem(l,`${o.getTime()}`),localStorage.setItem(s,`${t}`),m(t),this.previousElementSibling.previousElementSibling.valueAsNumber=t,this.disabled=!1}),e.style.setProperty("margin-inline","0.5em")}))),p.nextElementSibling);m(parseFloat(localStorage.getItem(s)??"0"));function u(n,e){return e*.4<=n&&n<=e*2.5}function c(n,e){return e*.75<=n&&n<=e*1.75}function m(n){[...document.querySelectorAll(".nationtable tr")].slice(1).forEach(e=>{let i=e.lastElementChild,t=parseFloat(i.lastChild.textContent.replaceAll(",",""));[...i.querySelectorAll("img")].forEach(o=>{o.src!=="https://politicsandwar.com/img/icons/16/plus_shield.png"&&o.remove()}),u(t,n)&&i.insertBefore(a("img",{src:"https://politicsandwar.com/img/icons/16/emotion_spy.png"}),i.lastChild),c(t,n)?c(n,t)?i.insertBefore(a("img",{src:"https://docscripts.stagintin.com/icons/green_red.png"}),i.lastChild):i.insertBefore(a("img",{src:"https://docscripts.stagintin.com/icons/green.png"}),i.lastChild):c(n,t)&&i.insertBefore(a("img",{src:"https://docscripts.stagintin.com/icons/red.png"}),i.lastChild)})}
//# sourceMappingURL=data:application/json;base64,
